define(["sugar-web/activity/activity", "sugar-web/env","sugar-web/graphics/icon", "webL10n","sugar-web/graphics/presencepalette", "webL10n", "tutorial"], function (activity,env, icon, webL10n, presencepalette, webL10n, tutorial) {

	// Manipulate the DOM only when it is ready.
	requirejs(['domReady!'], function (doc) {

		// Initialize the activity.
		activity.setup();
		env.getEnvironment(function(err, environment) {
			var presence = null;
			var pawns = [];
			var isHost = false;
			var networkButton = document.getElementById("network-button");
			// var presencepalette = new presencepalette.PresencePalette(networkButton,undefined);
			// presencepalette.addEventListener('shared',shareActivity);
			var palette = new presencepalette.PresencePalette(document.getElementById("network-button"), undefined);
			document.getElementsByClassName("p4wn-log").innerHTML="Game logs";
			palette.addEventListener('shared',shareActivity);
			currentenv = environment;
			console.log(currentenv.user.colorvalue);
			var defaultLanguage = (typeof chrome != 'undefined' && chrome.app && chrome.app.runtime) ? chrome.i18n.getUILanguage() : navigator.language;
			var language = environment.user ? environment.user.language : defaultLanguage;
			webL10n.language.code = language;
			document.getElementById("canvas").style.backgroundColor=environment.user.colorvalue.fill;
			P4WN_LEVELS[0] = webL10n.get("stupid");
			P4WN_LEVELS[1] = webL10n.get("middling");
			P4WN_LEVELS[2] = webL10n.get("default");
			P4WN_LEVELS[3] = webL10n.get("slow");
			P4WN_LEVELS[4] = webL10n.get("slowest");
			button5_title = webL10n.get("PawnPromotesTo");
			button6_title = webL10n.get("ComputerLevel");
			// document.getElementById("user").innerHTML = "<h1>"+"Hello"+" "+environment.user.name+" !</h1>";
			var set_board = function(data_obj){
				for(var key in data_obj)
					{
						if(typeof(data_obj[key]) != "object")
							game["board_state"][key] = data_obj[key];
					}
					for(var i=0;i<120;i++)
					{
						game["board_state"]["board"][i] = data_obj["board"][i];
					}
					game.refresh();
					for(var index in data_obj["history"])
					{
						var len = data_obj["history"][index].length;
						if(game["board_state"]["history"][index] == undefined)
							game["board_state"]["history"].push(data_obj["history"][index]);
						else
							game["board_state"]["history"][index] = data_obj["history"][index];
					}
					game["board_state"]["pieces"] = data_obj["pieces"];
					for(var key in data_obj["position_counts"])
					{
						game["board_state"]["position_counts"][key] = data_obj["position_counts"][key];
					}
					game["board_state"]["stalemate_scores"] = data_obj["stalemate_scores"];
					game["board_state"]["best_pieces"] = data_obj["best_pieces"];
					game["board_state"]["values"] = data_obj["values"];
			}

			if (!environment.objectId) {
				

			} else {
				console.log("Existing instance");
				var load_fen="rnbqkbnr/pppppppp/8/8/8/P7/1PPPPPPP/RNBQKBNR b KQkq - ";
				var recieved_fen="";
				activity.getDatastoreObject().loadAsText(function(error, metadata, data){
					if (error==null && data!=null){
						recieved_fen = JSON.parse(data);
						game.set_data(
							recieved_fen[0],
							recieved_fen[1],
							parseInt(recieved_fen[2]),
							parseInt(recieved_fen[3]),
							parseInt(recieved_fen[4])
						);
						set_board(recieved_fen[5]);
						if(game["draw_offers"] == 1)
							document.getElementById("toolbut7").style.display = 'inline-block';
						document.getElementsByClassName("p4wn-log")[0].innerHTML = recieved_fen[6];
						
						
					}
				});
			}

			// user join from shared instance
			if(environment.sharedId){
				console.log("shared instance",game);
				presence = activity.getPresenceObject(function(error,network){
					if (error){
						console.log("error in p");
						return;
					}
					network.onDataReceived(onNetworkDataReceived);
					network.onSharedActivityUserChanged(onNetworkUserChanged);
				});
			}
			function shareActivity() {
				palette.popDown();
				console.log("Want to share");
				game.players[0] = "human";
				game.players[1] = "human";
				document.getElementById("toolbut1").disabled = true;
				document.getElementById("toolbut2").disabled = true;
				document.getElementById("toolbut3").disabled = true;
				game.refresh_buttons();
				presence = activity.getPresenceObject(function(error,network){
					// if no error in getting presence obj means connected to server
					
					if (error) {
						console.log("error in sharing ");
						return;
					}
					userSettings = network.getUserInfo();
					if(!window.top.sugar.environment.sharedId){
						network.createSharedActivity('org.sugarlabs.Chess',function(groupId){
							console.log("Activity Shared");
							
							isHost = true;
						});
					}
					network.onConnectionClosed(function(event){
						presence = null;
						document.getElementById("stop-button").click();
						
					});
					
					network.onDataReceived(onNetworkDataReceived);
					network.onSharedActivityUserChanged(onNetworkUserChanged);
				});
			}

			var onNetworkUserChanged = function(msg){
				if (isHost) {
					var log_div = document.getElementsByClassName("p4wn-log")[0]
					presence.sendMessage(presence.getSharedInfo().id, {
						user: presence.getUserInfo(),
						content: {
							action: 'init',
							data: game,
							log_div_html : log_div.innerHTML
						}
					});
				}
				console.log("User "+msg.user.name+" "+(msg.move == 1 ? "join": "left"));
				document.getElementsByClassName("humane-libnotify")[0].style.display = "";
				document.getElementsByClassName("humane-libnotify")[0].innerHTML = msg.user.name + " " +(msg.move == 1 ? "joined": "left"); 
				var notificationDiv = function(){
					document.getElementsByClassName("humane-libnotify")[0].style.display = "none";
				}
				setTimeout(notificationDiv, 1000);
			};

			game.square_clicked = function(square){
				var board = game.board_state.board;
				var mover = game.board_state.to_play;
				var piece = board[square];
				//condition to make sure player doesn't make move of other in presence 
				if(presence != null)
				{
					if(mover == 0)
					{
						if(isHost){}
						else
							return;
					}
					else
					{
						if(isHost == false){}
						else
							return;
					}
				}
				if (game.start == square){
					//clicked back on previously chosen piece -- putting it down again
					game.stop_moving_piece();
				}
				else if (piece && (mover == (piece & 1))){
					//clicked on player's colour, so it becomes start
					game.start_moving_piece(square);
				}
				else if (game.move(game.start, square, P4WN_PROMOTION_INTS[game.pawn_becomes])){
					/*If the move works, drop the piece.*/
					game.stop_moving_piece(square);
					if (presence) {
						presence.sendMessage(presence.getSharedInfo().id, {
							user: presence.getUserInfo(),
							content: {
								action:'update',
								data: game,
								log_div_html: document.getElementsByClassName("p4wn-log")[0].innerHTML,
							}
						});
					}
				}
			}
			var promotion_position=0;
			
			// document.getElementById("button5").addEventListener('click',function(event){

			// });
			var onNetworkDataReceived = function(msg){
				if (presence.getUserInfo().networkId === msg.user.networkId) {
					console.log("ret");
					return;
				}
				switch(msg.content.action){
					case 'init':
						console.log("inside init");
						game.players[0] = "human";
						game.players[1] = "human";
						document.getElementById("toolbut1").disabled = true;
						document.getElementById("toolbut2").disabled = true;
						document.getElementById("toolbut6").disabled = true;
						game.refresh_buttons();
						set_board(msg.content.data["board_state"]);
						game["draw_offers"] = parseInt(msg.content.data.draw_offers);
						if(game["draw_offers"] == 1)
							document.getElementById("toolbut7").style.display = 'inline-block';
						document.getElementsByClassName("p4wn-log")[0].innerHTML = msg.content.log_div_html;
						game.rotate_board_for_black();
						break;
	
					case 'update':{
						console.log("inside update");
						set_board(msg.content.data["board_state"]);
						game["draw_offers"] = parseInt(msg.content.data.draw_offers);
						if(game["draw_offers"] == 1)
							document.getElementById("toolbut7").style.display = 'inline-block';
						document.getElementsByClassName("p4wn-log")[0].innerHTML = msg.content.log_div_html;
						break;
					}
					
			}
	
			};	
		});
		
		
		document.getElementById("help-button").addEventListener('click', function(e) {
			tutorial.start();
		});
		
		console.log("activity started");
		
		// console.log(p);
		var guest_joined = function(a){
			did_guest_join=a;
		}
		
		// document.getElementById("button1").addEventListener('click',function(event){
		// 	// {/*white player */
		// 	// 	onclick_wrap: function(p4d){
		// 	// 		return function(e){
		// 	// 			p4d.flip_player(0);
		// 	// 		};
		// 	// 	},
		// 	// 	refresh: function(el){
		// 	// 		var s = this.players[0];
		// 	// 		el.innerHTML = 'white <img src="' + P4WN_IMAGE_DIR + '/' + s + '.png" alt="' + s + '">';
		// 	// 	}
		// 	// }
		// 	game.flip_player(0);
		// console.log("clicker");
		// });

		document.getElementById("fullscreen-button").addEventListener('click', function(event) {
			// document.getElementById("main-toolbar").style.display = "none";
			document.getElementById("main-toolbar").style.opacity = 0;
			document.getElementById("canvas").style.top = "0px";
			document.getElementById("unfullscreen-button").style.visibility = "visible";
			// resizeHandler();
		  });
  
		  //Return to normal size
		  document.getElementById("unfullscreen-button").addEventListener('click', function(event) {
			document.getElementById("main-toolbar").style.opacity = 1;
			// document.getElementById("main-toolbar").style.display = "block";
			document.getElementById("canvas").style.top = "55px";
			
			document.getElementById("unfullscreen-button").style.visibility = "hidden";
			// resizeHandler();
		});

		document.getElementById("restart_button").addEventListener('click',function(event){
			// var game = p4wnify("board-goes-here");
			// game.next_move();
			window.location.reload(true);
			return false;
		  });

		// var resizeHandler = function() {
		// 	var windowSize = document.body.clientHeight - headerSize + (document.getElementById("unfullscreen-button").style.visibility == "visible"?toolbarSize:0);
		// 	var zoom = windowSize/((qrSize*(100+marginPercent))/100);
		// 	document.getElementById("canvas").style.zoom = zoom;
		// 	var useragent = navigator.userAgent.toLowerCase();
		// 	if (useragent.indexOf('chrome') == -1) {
		// 		document.getElementById("canvas").style.MozTransform = "scale("+zoom+")";
		// 		document.getElementById("canvas").style.MozTransformOrigin = "0 0";
		// 	}
			
		// }
		// window.addEventListener('resize', resizeHandler);

		document.getElementById("stop-button").addEventListener('click',function (event) {
			console.log("stop clicked.");
			var data = [];
			data.push(game.players[0]);
			data.push(game.players[1]);
			data.push(game.pawn_becomes);
			data.push(game.computer_level);
			data.push(game.draw_offers);
			data.push(game["board_state"]);
			var log_div = document.getElementsByClassName("p4wn-log")[0];
			data.push(log_div.innerHTML);
			var jsonData = JSON.stringify(data);
			console.log("stringified");
			
			activity.getDatastoreObject().setDataAsText(jsonData);
			activity.getDatastoreObject().save(function (error) {
				if (error === null) {
					console.log("write done.");
					// console.log("write done.");
				} else {
					console.log("write failed.");
					console.log("write failed.");
		}
	});
		})

		var translator=function(){
			document.getElementById("activity-button").title=webL10n.get("AB");
			document.getElementById("network-button").title=webL10n.get("NB");
			document.getElementById("stop-button").title=webL10n.get("STB");
			document.getElementById("help-button").title=webL10n.get("HB");
			
			document.getElementById("title").value=webL10n.get("TITLE");
			document.getElementById("fullscreen-button").title=webL10n.get("FB");
			document.getElementById("unfullscreen-button").title=webL10n.get("UFB");
			document.getElementById("toolbut1").title=webL10n.get("WhitePlayer");
			document.getElementById("toolbut2").title=webL10n.get("BlackPlayer");
			document.getElementById("toolbut3").title=webL10n.get("Swap");
			document.getElementById("toolbut4").title=webL10n.get("UFB");
			document.getElementById("restart-button").title=webL10n.get("Restart");
			
		};

		
	});
	

});
